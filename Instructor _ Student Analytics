--Task 2
--SHREYA JOSHI

--Q1. List all courses that have "Intro to Information Systems" as prerequisite. (HINT: use a
--subquery)

SELECT COURSE_NO, PREREQUISITE, DESCRIPTION
FROM COURSE
WHERE PREREQUISITE IN (SELECT COURSE.COURSE_NO FROM COURSE WHERE COURSE.DESCRIPTION = 'Intro to Information Systems')

--Q2. List all courses with above average cost. Display course description, cost, and the average cost
--of all courses. (HINT: use a subquery)

SELECT DESCRIPTION, COST, round((SELECT AVG(COST) FROM COURSE),2) AS AVERAGE_COST
FROM COURSE 
WHERE COST > (SELECT AVG(COST) FROM COURSE)

--Q3. For each zip that has at least one instructor, list the total number of instructors in that zipcode.

SELECT ZIPCODE.CITY, ZIPCODE.STATE, INSTRUCTOR.INSTRUCTOR_ID
FROM ZIPCODE
LEFT JOIN INSTRUCTOR ON INSTRUCTOR.ZIP = ZIPCODE.ZIP
GROUP BY ZIPCODE.CITY, ZIPCODE.STATE,  INSTRUCTOR.INSTRUCTOR_ID
HAVING INSTRUCTOR.INSTRUCTOR_ID > 0


--Q4. For each city in the state of CT, list the total number of students live in that city. Display city,
--state, number of students in descending order.
-- AGGREGATION OF FULL RESULT SET 

SELECT ZIPCODE.CITY, ZIPCODE.STATE, COUNT(STUDENT.STUDENT_ID) AS STUDENT_COUNT
FROM ZIPCODE
LEFT JOIN STUDENT ON ZIPCODE.ZIP = STUDENT.ZIP
WHERE ZIPCODE.STATE = 'CT'
GROUP BY ZIPCODE.CITY, ZIPCODE.STATE
ORDER BY COUNT(STUDENT.STUDENT_ID) DESC;

--Q5. Find the minimum, maximum, and average grade of final exams in sections taught by Todd
--Smythe.

SELECT MIN(NUMERIC_GRADE) AS MIN, MAX(NUMERIC_GRADE) AS MAX, AVG(NUMERIC_GRADE) AS AVG

FROM GRADE
LEFT JOIN GRADE_TYPE ON GRADE.GRADE_TYPE_CODE = GRADE_TYPE.GRADE_TYPE_CODE
LEFT JOIN SECTION ON SECTION.SECTION_ID = GRADE.SECTION_ID
LEFT JOIN INSTRUCTOR ON SECTION.INSTRUCTOR_ID = INSTRUCTOR.INSTRUCTOR_ID

WHERE GRADE_TYPE.DESCRIPTION = 'Final' AND INSTRUCTOR.FIRST_NAME = 'Todd' AND INSTRUCTOR.LAST_NAME = 'Smythe'

--Q6: For all students who took "Intro to Information Systems", calculate the highest, lowest, and
--average midterm exam grade for each section. Display Section No and calculation results.
-- TABLE JOIN WITH HAVING-CLAUSE
SELECT MIN(GRADE.NUMERIC_GRADE) AS MIN, MAX(GRADE.NUMERIC_GRADE) AS MAX, AVG(GRADE.NUMERIC_GRADE) AS AVG, SECTION.SECTION_NO

FROM GRADE
LEFT JOIN SECTION ON SECTION.SECTION_ID = GRADE.SECTION_ID
LEFT JOIN ENROLLMENT ON SECTION.SECTION_ID = ENROLLMENT.SECTION_ID
LEFT JOIN STUDENT ON ENROLLMENT.STUDENT_ID = STUDENT.STUDENT_ID
LEFT JOIN COURSE ON SECTION.COURSE_NO = COURSE.COURSE_NO

WHERE COURSE.DESCRIPTION = 'Intro to Information Systems' AND GRADE.GRADE_TYPE_CODE = 'MT'
GROUP BY SECTION.SECTION_NO

--Q7. List the instructor id and name of the instructors that teach fewer than 10 sections regardless
--of student enrollment.
SELECT INSTRUCTOR.INSTRUCTOR_ID, INSTRUCTOR.FIRST_NAME, INSTRUCTOR.LAST_NAME ,COUNT(SECTION.SECTION_ID)
FROM INSTRUCTOR
LEFT JOIN SECTION ON SECTION.INSTRUCTOR_ID = INSTRUCTOR.INSTRUCTOR_ID 
GROUP BY INSTRUCTOR.INSTRUCTOR_ID, INSTRUCTOR.FIRST_NAME, INSTRUCTOR.LAST_NAME
HAVING COUNT(SECTION.SECTION_ID) < 10

--Q8. Show which city has the most students. Display city and state, and number of students.

SELECT ZIPCODE.CITY, ZIPCODE.STATE, COUNT(STUDENT.STUDENT_ID) AS STUDENT_COUNT
FROM ZIPCODE
LEFT JOIN STUDENT ON ZIPCODE.ZIP = STUDENT.ZIP
GROUP BY ZIPCODE.CITY, ZIPCODE.STATE
ORDER BY COUNT(STUDENT.STUDENT_ID) DESC
FETCH FIRST 1 ROW ONLY

--Q9: List all zipcodes where at least three students AND at least four instructor reside. Show zip,
--state and city.
SELECT ZIPCODE.ZIP, ZIPCODE.CITY , ZIPCODE.STATE
FROM ZIPCODE
LEFT JOIN STUDENT ON STUDENT.ZIP = ZIPCODE.ZIP
LEFT JOIN INSTRUCTOR ON INSTRUCTOR.ZIP = ZIPCODE.ZIP
GROUP BY ZIPCODE.ZIP, ZIPCODE.CITY , ZIPCODE.STATE
HAVING COUNT(STUDENT.STUDENT_ID) > 2 AND COUNT(INSTRUCTOR.INSTRUCTOR_ID) > 3

--Q10: List all cities that have 10 or more students and instructor combined. Show city, state, number
--of student residents, number of instructor residents, and total student/instructor residents in that
--city. Sort by total in descending order. 

SELECT  ZIPCODE.CITY , ZIPCODE.STATE,
COUNT(DISTINCT STUDENT.STUDENT_ID) AS STUDENT_COUNT, COUNT(DISTINCT INSTRUCTOR.INSTRUCTOR_ID) AS INSTRUCTOR_COUNT,
COUNT(DISTINCT STUDENT.STUDENT_ID) + COUNT(DISTINCT INSTRUCTOR.INSTRUCTOR_ID) 
FROM ZIPCODE
LEFT JOIN STUDENT ON STUDENT.ZIP = ZIPCODE.ZIP
LEFT JOIN INSTRUCTOR ON ZIPCODE.ZIP = INSTRUCTOR.ZIP
GROUP BY ZIPCODE.CITY , ZIPCODE.STATE
HAVING COUNT(STUDENT.STUDENT_ID) + COUNT(INSTRUCTOR.INSTRUCTOR_ID) >= 10
ORDER BY TOTAL_COUNT  DESC 

