/* 1. DROP statements to clean up objects from previous run */
-- Triggers -
DROP TRIGGER TRG_PRODUCT;
DROP TRIGGER TRG_ORDERS;
DROP TRIGGER TRG_CUSTOMER;
DROP TRIGGER TRG_WAREHOUSE;
DROP TRIGGER TRG_VENDOR;

--Sequences
DROP SEQUENCE SEQ_PRODUCT_ID;
DROP SEQUENCE SEQ_ORDER_ID;
DROP SEQUENCE SEQ_CUSTOMER_ID;
DROP SEQUENCE SEQ_WAREHOUSE_ID;
DROP SEQUENCE SEQ_VENDOR_CODE;

-- Views
DROP VIEW CUSTOMERINFO;

-- Tables
DROP TABLE PRODUCT;
DROP TABLE ORDERS;
DROP TABLE CUSTOMER;
DROP TABLE WAREHOUSE;
DROP TABLE VENDOR;

/* 2.(DDL) CREATE statements to create new objects */
-- 2.1 Create Tables-- Customer
CREATE TABLE CUSTOMER( CUSTOMER_ID INTEGER NOT NULL,FIRST_NAME VARCHAR2 (30) NOT NULL,LAST_NAME VARCHAR2 (30) NOT NULL,ADDRESS VARCHAR (30),PHONE_NO NUMBER (30),EMAIL VARCHAR (30),CONSTRAINT PK_CUSTOMER PRIMARY KEY (CUSTOMER_ID));

-- Order
CREATE TABLE ORDERS( ORDER_ID INTEGER NOT NULL,PRODUCT_ID INTEGER NOT NULL,CUSTOMER_ID INTEGER NOT NULL,TOTAL_PRICE VARCHAR2 (30) NOT NULL,

--alter the type to integer
ORDER_DATE DATE NOT NULL,DELIVERY_ADDRESS VARCHAR (30),PAYMENT_METHOD VARCHAR2 (30),CONSTRAINT PK_ORDER PRIMARY KEY (ORDER_ID),CONSTRAINT FK_CUSTOMER_ID FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER);

--Vendor
CREATE TABLE VENDOR( VENDOR_CODE INTEGER NOT NULL,VENDOR_NAME VARCHAR2 (30) NOT NULL,ADDRESS VARCHAR2 (30) NOT NULL,EMAIL VARCHAR2 (30) NOT NULL,PHONE_NO NUMBER (30),CONSTRAINT PK_VENDOR PRIMARY KEY (VENDOR_CODE));--WAREHOUSECREATE TABLE WAREHOUSE( WAREHOUSE_ID INTEGER NOT NULL,VENDOR_CODE INTEGER,WAREHOUSE_ADDRESS VARCHAR2 (30) NOT NULL,WAREHOUSE_REGION VARCHAR2 (30) NOT NULL,EMAIL VARCHAR2 (30),CONSTRAINT PK_WAREHOUSE PRIMARY KEY (WAREHOUSE_ID),CONSTRAINT FK_VENDOR_CODE FOREIGN KEY (VENDOR_CODE) REFERENCES VENDOR);

--Product
CREATE TABLE PRODUCT( PRODUCT_ID INTEGER NOT NULL,WAREHOUSE_ID INTEGER NOT NULL,PRODUCT_TYPE VARCHAR2 (30) NOT NULL,PRODUCT_DESCRIPTION VARCHAR2 (30) NOT NULL,UNIT_PRICE INTEGER NOT NULL,CONSTRAINT PK_PRODUCT PRIMARY KEY (PRODUCT_ID),CONSTRAINT FK_WAREHOUSE_ID FOREIGN KEY (WAREHOUSE_ID) REFERENCES WAREHOUSE);

-- 2.2 Alter Table - add constaraint
ALTER TABLE ORDERS MODIFY TOTAL_PRICE INTEGER;-- 2.3 Create SequencesCREATE SEQUENCE SEQ_CUSTOMER_IDINCREMENT BY 1 START WITH 10000000000NOMAXVALUE MINVALUE 0 NOCACHE;CREATE SEQUENCE SEQ_ORDER_IDINCREMENT BY 1 START WITH 20000000000NOMAXVALUE MINVALUE 0 NOCACHE;CREATE SEQUENCE SEQ_PRODUCT_IDINCREMENT BY 1 START WITH 30000000000NOMAXVALUE MINVALUE 0 NOCACHE;CREATE SEQUENCE SEQ_WAREHOUSE_IDINCREMENT BY 1 START WITH 40000000000NOMAXVALUE MINVALUE 0 NOCACHE;CREATE SEQUENCE SEQ_VENDOR_CODEINCREMENT BY 1 START WITH 50000000000NOMAXVALUE MINVALUE 0 NOCACHE;

-- 2.4 Create Triggers
CREATE OR REPLACE TRIGGER TRG_CUSTOMER
BEFORE INSERT OR UPDATE ON CUSTOMER FOR EACH ROW 
BEGIN     
     IF INSERTING 
     THEN         
           IF :NEW.CUSTOMER_ID IS NULL 
           THEN :NEW.CUSTOMER_ID := SEQ_CUSTOMER_ID.NEXTVAL;         
      END IF;  
END;

CREATE OR REPLACE TRIGGER TRG_ORDERS 
BEFORE INSERT OR UPDATE ON ORDERSFOR EACH ROW 
BEGIN     
    IF INSERTING 
    THEN         
        IF :NEW.ORDER_ID IS NULL 
        THEN :NEW.ORDER_ID := SEQ_ORDER_ID.NEXTVAL;         
       END IF;    
       END IF;
END;

CREATE OR REPLACE TRIGGER TRG_VENDOR 
BEFORE INSERT OR UPDATE ON VENDORFOR EACH ROW 
BEGIN     IF INSERTING THEN         IF :NEW.VENDOR_CODE IS NULL THEN             :NEW.VENDOR_CODE := SEQ_VENDOR_CODE.NEXTVAL;         END IF;    END IF;END;/CREATE OR REPLACE TRIGGER TRG_WAREHOUSEBEFORE INSERT OR UPDATE ON WAREHOUSEFOR EACH ROW BEGIN     IF INSERTING THEN         IF :NEW.WAREHOUSE_ID IS NULL THEN             :NEW.WAREHOUSE_ID := SEQ_WAREHOUSE_ID.NEXTVAL;         END IF;    END IF;END;/CREATE OR REPLACE TRIGGER TRG_PRODUCTBEFORE INSERT OR UPDATE ON PRODUCTFOR EACH ROW BEGIN     IF INSERTING THEN         IF :NEW.PRODUCT_ID IS NULL THEN             :NEW.PRODUCT_ID := SEQ_PRODUCT_ID.NEXTVAL;         END IF;    END IF;END;

/-- 2.5 Create views
CREATE OR REPLACE VIEW CUSTOMERINFO AS SELECT CUSTOMER_ID, FIRST_NAME, LAST_NAME, ADDRESS FROM CUSTOMER;

/* 3.(DML) Insert data into tables*/
-- 3.1 Insert data into CUSTOMER Table
-- Customer
INSERT INTO CUSTOMER ( FIRST_NAME, LAST_NAME, ADDRESS, PHONE_NO, EMAIL) VALUES ( 'SHREYA', 'JOSHI', '7575 Frankford ROAD', '222333444', 'shreya98joshi@gmail.com');
INSERT INTO CUSTOMER ( FIRST_NAME, LAST_NAME, ADDRESS, PHONE_NO, EMAIL) VALUES ('SAGAR', 'HAGAWANE', '7421 FRANKFORD ROAD', '222555666', 'sagar@gmail.com');
INSERT INTO CUSTOMER ( FIRST_NAME, LAST_NAME, ADDRESS, PHONE_NO, EMAIL) VALUES ('RITESH', 'KULKARNI', '7421 Frankford ROAD', '555333444', 'ritesh@gmail.com');
INSERT INTO CUSTOMER ( FIRST_NAME, LAST_NAME, ADDRESS, PHONE_NO, EMAIL) VALUES ( 'JOHN', 'WATSON', '7575 Frankford ROAD', '242333444', 'john@gmail.com');
INSERT INTO CUSTOMER ( FIRST_NAME, LAST_NAME, ADDRESS, PHONE_NO, EMAIL) VALUES ( 'SONAL', 'SETH', '7576 Frankford ROAD', '242333441', 'sonal@gmail.com');
INSERT INTO CUSTOMER ( FIRST_NAME, LAST_NAME, ADDRESS, PHONE_NO, EMAIL) VALUES ( 'JAY', 'SHETTY', '7577 Frankford ROAD', '242333442', 'jay@gmail.com');
INSERT INTO CUSTOMER ( FIRST_NAME, LAST_NAME, ADDRESS, PHONE_NO, EMAIL) VALUES ( 'RAHUL', 'KUMAR', '7578 Frankford ROAD', '242333443', 'rahul@gmail.com');
INSERT INTO CUSTOMER ( FIRST_NAME, LAST_NAME, ADDRESS, PHONE_NO, EMAIL) VALUES ( 'ROCKY', 'BHAI', '7579 Frankford ROAD', '242333445', 'rocky@gmail.com');
INSERT INTO CUSTOMER ( FIRST_NAME, LAST_NAME, ADDRESS, PHONE_NO, EMAIL) VALUES ( 'SANJAY', 'DUTT', '7580 Frankford ROAD', '242333446', 'sanjay@gmail.com');
INSERT INTO CUSTOMER ( FIRST_NAME, LAST_NAME, ADDRESS, PHONE_NO, EMAIL) VALUES ( 'RANBIR', 'KAPOOR', '7581 Frankford ROAD', '242333447', 'ranbir@gmail.com');
INSERT INTO CUSTOMER ( FIRST_NAME, LAST_NAME, ADDRESS, PHONE_NO, EMAIL) VALUES ( 'SUNIL', 'SHETTY', '7582 Frankford ROAD', '242333448', 'sunil@gmail.com');

-- 3.2 Insert data into VENDOR Table
-- Vendor
INSERT INTO VENDOR (  VENDOR_NAME, ADDRESS, EMAIL, PHONE_NO) VALUES ( 'RM SUPPLIERS', 'DALLAS PKWY', 'rm@gmail.com', '777666555');
INSERT INTO VENDOR (  VENDOR_NAME, ADDRESS, EMAIL, PHONE_NO) VALUES ( 'RK SUPPLIERS', 'DALLAS PKWY', 'rm@gmail.com', '777666555');
INSERT INTO VENDOR (  VENDOR_NAME, ADDRESS, EMAIL, PHONE_NO) VALUES ( 'MN SUPPLIERS', 'PLANO PKWY', 'mn@gmail.com', '777444555');
INSERT INTO VENDOR (  VENDOR_NAME, ADDRESS, EMAIL, PHONE_NO) VALUES ( 'SH SUPPLIERS', 'PLANO PKWY', 'sh@gmail.com', '777344555');
INSERT INTO VENDOR (  VENDOR_NAME, ADDRESS, EMAIL, PHONE_NO) VALUES ( 'AH SUPPLIERS', 'DFW PKWY', 'ah@gmail.com', '776344555');
INSERT INTO VENDOR (  VENDOR_NAME, ADDRESS, EMAIL, PHONE_NO) VALUES ( 'SS SUPPLIERS', 'PLANO PKWY', 'ss@gmail.com', '777544555');
INSERT INTO VENDOR (  VENDOR_NAME, ADDRESS, EMAIL, PHONE_NO) VALUES ( 'SSA SUPPLIERS', 'PLANO PKWY', 'ssa@gmail.com', '777544556');
INSERT INTO VENDOR (  VENDOR_NAME, ADDRESS, EMAIL, PHONE_NO) VALUES ( 'SSB SUPPLIERS', 'DFW PKWY', 'ssb@gmail.com', '777544557');
INSERT INTO VENDOR (  VENDOR_NAME, ADDRESS, EMAIL, PHONE_NO) VALUES ( 'SSC SUPPLIERS', 'DFW PKWY', 'ssc@gmail.com', '777544558');
INSERT INTO VENDOR (  VENDOR_NAME, ADDRESS, EMAIL, PHONE_NO) VALUES ( 'SSD SUPPLIERS', 'PLANO PKWY', 'ssd@gmail.com', '777544559');
INSERT INTO VENDOR (  VENDOR_NAME, ADDRESS, EMAIL, PHONE_NO) VALUES ( 'SSE SUPPLIERS', 'DALLAS PKWY', 'sse@gmail.com', '777544552');

-- 3.3 Insert data into WAREHOUSE Table
-- Warehouse
INSERT INTO WAREHOUSE (  VENDOR_CODE, WAREHOUSE_ADDRESS, WAREHOUSE_REGION, EMAIL ) VALUES ( 50000000000, 'DALLAS PKWY', 'DALLAS', 'wh4000@gmail.com');
INSERT INTO WAREHOUSE (  VENDOR_CODE, WAREHOUSE_ADDRESS, WAREHOUSE_REGION, EMAIL ) VALUES ( 50000000001, 'DALLAS PKWY', 'DALLAS', 'wh4001@gmail.com');
INSERT INTO WAREHOUSE (  VENDOR_CODE, WAREHOUSE_ADDRESS, WAREHOUSE_REGION, EMAIL ) VALUES ( 50000000002, 'PLANO PKWY', 'PLANO', 'wh4002@gmail.com');
INSERT INTO WAREHOUSE (  VENDOR_CODE, WAREHOUSE_ADDRESS, WAREHOUSE_REGION, EMAIL ) VALUES ( 50000000003, 'PLANO PKWY', 'PLANO', 'wh4003@gmail.com');
INSERT INTO WAREHOUSE (  VENDOR_CODE, WAREHOUSE_ADDRESS, WAREHOUSE_REGION, EMAIL ) VALUES ( 50000000004, 'DFW PKWY', 'DFW', 'wh4004@gmail.com');
INSERT INTO WAREHOUSE (  VENDOR_CODE, WAREHOUSE_ADDRESS, WAREHOUSE_REGION, EMAIL ) VALUES ( 50000000005, 'PLANO PKWY', 'PLANO', 'wh4005@gmail.com');
INSERT INTO WAREHOUSE (  VENDOR_CODE, WAREHOUSE_ADDRESS, WAREHOUSE_REGION, EMAIL ) VALUES ( 50000000005, 'DFW PKWY', 'DFW', 'wh4006@gmail.com');
INSERT INTO WAREHOUSE (  VENDOR_CODE, WAREHOUSE_ADDRESS, WAREHOUSE_REGION, EMAIL ) VALUES ( 50000000005, 'PLANO PKWY', 'PLANO', 'wh4007@gmail.com');
INSERT INTO WAREHOUSE (  VENDOR_CODE, WAREHOUSE_ADDRESS, WAREHOUSE_REGION, EMAIL ) VALUES ( 50000000005, 'DALLAS PKWY', 'DALLAS', 'wh4008@gmail.com');
INSERT INTO WAREHOUSE (  VENDOR_CODE, WAREHOUSE_ADDRESS, WAREHOUSE_REGION, EMAIL ) VALUES ( 50000000005, 'DFW PKWY', 'DFW', 'wh4009@gmail.com');

-- 3.4 Insert data into PRODUCT Table
-- Product
INSERT INTO PRODUCT (  WAREHOUSE_ID, PRODUCT_TYPE, PRODUCT_DESCRIPTION, UNIT_PRICE) VALUES (  40000000000, 'CLOTHING', 'SHIRT', 10);INSERT INTO PRODUCT (  WAREHOUSE_ID, PRODUCT_TYPE, PRODUCT_DESCRIPTION, UNIT_PRICE) VALUES (  40000000000, 'CLOTHING', 'PANT', 15);INSERT INTO PRODUCT (  WAREHOUSE_ID, PRODUCT_TYPE, PRODUCT_DESCRIPTION, UNIT_PRICE) VALUES (  40000000001, 'ELECTRONICS', 'MOUSE', 50);INSERT INTO PRODUCT (  WAREHOUSE_ID, PRODUCT_TYPE, PRODUCT_DESCRIPTION, UNIT_PRICE) VALUES (  40000000002, 'GROCERY', 'VEGETABLES', 5);INSERT INTO PRODUCT (  WAREHOUSE_ID, PRODUCT_TYPE, PRODUCT_DESCRIPTION, UNIT_PRICE) VALUES (  40000000003, 'ELECTRONICS', 'AIRPODS', 90);INSERT INTO PRODUCT (  WAREHOUSE_ID, PRODUCT_TYPE, PRODUCT_DESCRIPTION, UNIT_PRICE) VALUES (  40000000003, 'ELECTRONICS', 'LAPTOP', 90);INSERT INTO PRODUCT (  WAREHOUSE_ID, PRODUCT_TYPE, PRODUCT_DESCRIPTION, UNIT_PRICE) VALUES (  40000000002, 'GROCERY', 'SOAP', 10);INSERT INTO PRODUCT (  WAREHOUSE_ID, PRODUCT_TYPE, PRODUCT_DESCRIPTION, UNIT_PRICE) VALUES (  40000000001, 'ELECTRONICS', 'KEYBOARD', 30);INSERT INTO PRODUCT (  WAREHOUSE_ID, PRODUCT_TYPE, PRODUCT_DESCRIPTION, UNIT_PRICE) VALUES (  40000000002, 'CLOTHING', 'JEANS', 25);INSERT INTO PRODUCT (  WAREHOUSE_ID, PRODUCT_TYPE, PRODUCT_DESCRIPTION, UNIT_PRICE) VALUES (  40000000000, 'GROCERY', 'JUICE', 15);-- 3.5 Insert data into ORDERS Table-- Orders-- For Apex UsersINSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000000, 10000000000, 40, 'OCT-25-2007', '7575 Frankford Road', 'CREDIT CARD');INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000001, 10000000000, 90, 'OCT-25-2007', '7575 Frankford Road', 'CREDIT CARD');INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000002, 10000000000, 100,'OCT-25-2007', '7575 Frankford Road', 'CREDIT CARD');INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000001, 10000000001, 45, 'OCT-31-2007', '7421 Frankford Road', 'CREDIT CARD');INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000002, 10000000002, 50, 'DEC-31-2007', '7421 Frankford Road', 'CASH');INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000003, 10000000003, 90, 'JAN-31-2008', '7575 Frankford Road', 'DEBIT CARD');INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000004, 10000000003, 180,'JAN-31-2008', '7575 Frankford Road', 'DEBIT CARD');INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000004, 10000000004, 90, 'OCT-31-2008', '7576 Frankford Road', 'CASH');INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000005, 10000000004, 90, 'OCT-31-2008', '7576 Frankford Road', 'CASH');INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000001, 10000000004, 75, 'OCT-31-2008', '7576 Frankford Road', 'CASH');INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000001, 10000000005, 60, 'AUG-31-2008', '7577 Frankford Road', 'DEBIT CARD');INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000002, 10000000005, 150,'AUG-31-2008', '7577 Frankford Road', 'DEBIT CARD');INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000001, 10000000005, 150,'AUG-31-2008', '7577 Frankford Road', 'DEBIT CARD');-- For SQL Users--INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000000, 10000000000, 40, '25-OCT-2007', '7575 Frankford Road', 'CREDIT CARD');--INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000001, 10000000000, 90, '25-OCT-2007', '7575 Frankford Road', 'CREDIT CARD');--INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000002, 10000000000, 100,'25-OCT-2007', '7575 Frankford Road', 'CREDIT CARD');--INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000001, 10000000001, 45, '31-OCT-2007', '7421 Frankford Road', 'CREDIT CARD');--INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000002, 10000000002, 50, '31-DEC-2007', '7421 Frankford Road', 'CASH');--INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000003, 10000000003, 90, '31-JAN-2008', '7575 Frankford Road', 'DEBIT CARD');--INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000004, 10000000003, 180,'31-JAN-2008', '7575 Frankford Road', 'DEBIT CARD');--INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000004, 10000000004, 90, '31-OCT-2008', '7576 Frankford Road', 'CASH');--INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000005, 10000000004, 90, '31-OCT-2008', '7576 Frankford Road', 'CASH');--INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000001, 10000000004, 75, '31-OCT-2008', '7576 Frankford Road', 'CASH');--INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000001, 10000000005, 60, '31-AUG-2008', '7577 Frankford Road', 'DEBIT CARD');--INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000002, 10000000005, 150,'31-AUG-2008', '7577 Frankford Road', 'DEBIT CARD');--INSERT INTO ORDERS (PRODUCT_ID, CUSTOMER_ID, TOTAL_PRICE, ORDER_DATE, DELIVERY_ADDRESS, PAYMENT_METHOD) VALUES (30000000001, 10000000005, 150,'31-AUG-2008', '7577 Frankford Road', 'DEBIT CARD');

--COMMIT;
Select * from customer;
Select * from orders;
Select * from vendor;
Select * from warehouse;
Select * from product;

--Query 1
SELECT * FROM CUSTOMER;

-- QUERY 2
SELECT CUSTOMER_ID, FIRST_NAME, LAST_NAME, ADDRESS, PHONE_NO FROM CUSTOMER;

-- QUERY 3
SELECT * FROM CUSTOMERINFO;



--QUERY 4
SELECT * FROM CUSTOMER CINNER JOIN ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_ID;

-- QUERY 5
SELECT * FROM ORDERS ORDER BY TOTAL_PRICE DESC;

-- QUERY 6
SELECT C.FIRST_NAME,C.LAST_NAME, P.PRODUCT_DESCRIPTION, O.TOTAL_PRICE, O.ORDER_DATE FROM CUSTOMER CLEFT JOIN ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_IDLEFT JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_ID;

-- QUERY 7
SELECT DISTINCT C.FIRST_NAME,C.LAST_NAME, P.PRODUCT_DESCRIPTION, O.TOTAL_PRICE, O.ORDER_DATE FROM CUSTOMER CLEFT JOIN ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_IDLEFT JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_ID;

-- QUERY 8
-- FILTER TOTAL SALE OF DIFFERENT PRODUCT TYPES GIVEN TOTAL SALES IS MORE THAN 50
SELECT P.PRODUCT_TYPE, SUM(O.TOTAL_PRICE) FROM ORDERS OLEFT JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_IDGROUP BY P.PRODUCT_TYPEHAVING SUM(O.TOTAL_PRICE) > 50;

-- QUERY 9
SELECT *FROM CUSTOMER CLEFT JOIN ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_IDLEFT JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_IDWHERE P.PRODUCT_TYPE IN ('CLOTHING', 'GROCERY');

-- QUERY 10
SELECT EMAIL, LENGTH(EMAIL) AS EMAIL_LENGHT FROM CUSTOMER;

-- QUERY 11
SELECT * FROM PRODUCT;DELETE FROM PRODUCT WHERE WAREHOUSE_ID = 40000000000;SELECT * FROM PRODUCT;ROLLBACK;SELECT * FROM PRODUCT;

-- QUERY 12
SELECT * FROM ORDERS;UPDATE ORDERS SET TOTAL_PRICE = 100WHERE ORDER_ID = 20000000000;SELECT * FROM ORDERS;ROLLBACK;SELECT * FROM ORDERS;

-- QUERY 13
--  FIND SALES FROM THE WAREHOUSE WHOSE WARE HOUSE IS IN PLANO REGION AND VENDORS ARE ALSO FROM PLANOSELECT W.WAREHOUSE_ID, SUM(O.TOTAL_PRICE) AS SALE FROM ORDERS OLEFT JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_IDLEFT JOIN WAREHOUSE W ON W.WAREHOUSE_ID = P.WAREHOUSE_IDLEFT JOIN VENDOR V ON W.VENDOR_CODE = V.VENDOR_CODEWHERE V.ADDRESS LIKE '%PLANO%' AND W.WAREHOUSE_ADDRESS LIKE '%PLANO%'GROUP BY W.WAREHOUSE_ID;

-- QUERY 14
-- FIND THE TOTAL SALES DONE THROUGH EACH PAYMENT METHOD AND BEFORE 1ST OCT 2008

-- FOR APEX
SELECT PAYMENT_METHOD, SUM(TOTAL_PRICE) AS TOTAL_SALES FROM ORDERS WHERE ORDER_DATE < 'OCT-01-2008'GROUP BY PAYMENT_METHOD;

--FOR SQL–
SELECT PAYMENT_METHOD, SUM(TOTAL_PRICE) AS TOTAL_SALES FROM ORDERS --WHERE ORDER_DATE < '01-OCT-2008'--GROUP BY PAYMENT_METHOD;

-- QUERY 15
-- FIND THE TOTAL COUNT OF  PRODUCT_TYPE SOLD WHOSE WAREHOUSE IS IN DALLAS
SELECT P.PRODUCT_TYPE, COUNT(O.PRODUCT_ID) AS QUANTITIESFROM ORDERS OLEFT JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_IDLEFT JOIN WAREHOUSE W ON W.WAREHOUSE_ID = P.WAREHOUSE_IDWHERE W.WAREHOUSE_REGION = 'DALLAS'GROUP BY P.PRODUCT_TYPE;

-- QUERY 16
-- TOTAL SALES OF THE DIFFERENT VENDORS WHEN WAREHOUSE AND VENDOR ADDRESS ARE SAME AND ITS DALLAS
SELECT V.VENDOR_NAME, SUM(TOTAL_PRICE) FROM ORDERS OLEFT JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_IDLEFT JOIN WAREHOUSE W ON W.WAREHOUSE_ID = P.WAREHOUSE_IDLEFT JOIN VENDOR V ON W.VENDOR_CODE = V.VENDOR_CODEWHERE W.WAREHOUSE_REGION = 'DALLAS' AND V.ADDRESS LIKE '%DALLAS%'GROUP BY V.VENDOR_NAME;

-- QUERY 17
-- HOW MANY WAREHOUSE FROM EACH REGION MADE SALE AND HOW MANY HAVE NOT MADE ANY SALES
SELECT A.WAREHOUSE_REGION, COUNT(CASE WHEN SALE = 1 THEN SALE END) AS SALES,COUNT(CASE WHEN SALE = 0 THEN SALE END) AS NO_SALESFROM(SELECT W.WAREHOUSE_REGION, W.WAREHOUSE_ID, COUNT(DISTINCT CASE WHEN O.ORDER_ID IS NOT NULL THEN W.WAREHOUSE_ID END) AS SALE, COUNT(DISTINCT CASE WHEN O.ORDER_ID IS NULL THEN W.WAREHOUSE_ID END) AS NO_SALEFROM WAREHOUSE WLEFT JOIN PRODUCT P ON P.WAREHOUSE_ID = W.WAREHOUSE_IDLEFT JOIN ORDERS O ON O.PRODUCT_ID  = P.PRODUCT_IDGROUP BY W.WAREHOUSE_ID, W.WAREHOUSE_REGION) AGROUP BY A.WAREHOUSE_REGION;

-- QUERY 18
-- FIND OUT COUNT OF WAREHOUSE FROM EACH REGION WHICH HAVE SOLD PRODUCT WORTH LESS THAN 500SELECT W.WAREHOUSE_REGION, SUM(O.TOTAL_PRICE) AS TOTAL_SALES FROM ORDERS OLEFT JOIN PRODUCT P ON O.PRODUCT_ID = P.PRODUCT_IDLEFT JOIN WAREHOUSE W ON W.WAREHOUSE_ID = P.WAREHOUSE_IDGROUP BY W.WAREHOUSE_REGIONHAVING SUM(O.TOTAL_PRICE) < 500 ;

-- QUERY 19
-- LIST ALL THE REGION WHERE ATLEAST 3 WAREHOUSES ARE THERE
SELECT WAREHOUSE_REGION, COUNT(WAREHOUSE_ID) FROM WAREHOUSEGROUP BY WAREHOUSE_REGIONHAVING COUNT(WAREHOUSE_ID) >=3;

-- QUERY 20
-- LIST ALL THE CUSTOMERS WHO HAVE BOUGHT BOTH ELECTRONICS AND GROCERY PRODUCT TYPE
SELECT DISTINCT C.FIRST_NAME, C.LAST_NAME, P1.PRODUCT_TYPE as P1_Type ,P2.PRODUCT_TYPE as P2_TypeFROM CUSTOMER CINNER JOIN ORDERS O1 ON O1.CUSTOMER_ID = C.CUSTOMER_ID INNER JOIN ORDERS O2 ON O1.CUSTOMER_ID = O2.CUSTOMER_ID LEFT JOIN PRODUCT P1 ON O1.PRODUCT_ID = P1.PRODUCT_IDLEFT JOIN PRODUCT P2 ON O2.PRODUCT_ID = P2.PRODUCT_IDWHERE O1.PRODUCT_ID > O2.PRODUCT_IDAND ((P1.PRODUCT_TYPE = 'GROCERY' AND P2.PRODUCT_TYPE = 'ELECTRONICS') OR (P2.PRODUCT_TYPE = 'GROCERY' AND P1.PRODUCT_TYPE = 'ELECTRONICS')) ;/* 

---------------------------------------------------- VALIDATION -----------------------------------------------------------

 */select o.*,  (o.total_price/P.unit_price) AS quantity from orders oleft join product p  on o.product_id = p.product_id;
SELECT C.ADDRESS, O.DELIVERY_ADDRESS FROM CUSTOMER CLEFT JOIN ORDERS O ON C.CUSTOMER_ID = O.CUSTOMER_ID;
SELECT * FROM ORDERS OLEFT JOIN CUSTOMER C ON O.CUSTOMER_ID = C.CUSTOMER_ID;
